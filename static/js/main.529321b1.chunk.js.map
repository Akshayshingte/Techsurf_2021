{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["locales","require","localizer","dateFnsLocalizer","format","parse","startOfWeek","getDay","events","title","start","Date","end","App","useState","newEvent","setNewEvent","allEvents","setAllEvents","className","type","placeholder","style","width","marginRight","padding","value","onChange","e","target","placeholderText","showTimeSelect","dateFormat","selected","button","marginTop","onClick","startAccessor","endAccessor","height","margin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAaMA,EAAU,CACZ,QAASC,EAAQ,MAEfC,EAAYC,YAAiB,CAC/BC,iBACAC,gBACAC,sBACAC,iBACAP,YAGEQ,EAAS,CACX,CACIC,MAAO,eACPC,MAAO,IAAIC,KAAK,sBAChBC,IAAK,IAAID,KAAK,wBAElB,CACIF,MAAO,kCACPC,MAAO,IAAIC,KAAK,uBAChBC,IAAK,IAAID,KAAK,wBAElB,CACIF,MAAO,uBACPC,MAAO,IAAIC,KAAK,uBAChBC,IAAK,IAAID,KAAK,yBA4BPE,MAxBf,WACI,MAAgCC,mBAAS,CAAEL,MAAO,GAAIC,MAAO,GAAIE,IAAK,KAAtE,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,mBAASN,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KAMA,OACI,sBAAKC,UAAU,MAAf,UACI,0CACA,+CACA,sBAAKA,UAAY,YAAjB,UAEI,uBAAOC,KAAK,OAAOC,YAAY,gBAAgBC,MAAO,CAAEC,MAAO,MAAOC,YAAa,OAAQC,QAAS,OAASC,MAAOX,EAASN,MAAOkB,SAAU,SAACC,GAAD,OAAOZ,EAAY,2BAAKD,GAAN,IAAgBN,MAAOmB,EAAEC,OAAOH,YAChM,cAAC,IAAD,CAAYI,gBAAgB,2BAA2BR,MAAO,CAAEE,YAAa,QAAUO,gBAAc,EAACC,WAAW,wBAAwBC,SAAUlB,EAASL,MAAOiB,SAAU,SAACjB,GAAD,OAAWM,EAAY,2BAAKD,GAAN,IAAgBL,cACnN,cAAC,IAAD,CAAYoB,gBAAgB,yBAAyBG,SAAUlB,EAASH,IAAKmB,gBAAc,EAACC,WAAW,wBAAwBL,SAAU,SAACf,GAAD,OAASI,EAAY,2BAAKD,GAAN,IAAgBH,YAC7K,uBAAOQ,KAAO,SAASM,MAAQ,aAAaQ,QAAM,EAACZ,MAAO,CAAEa,UAAW,QAAUC,QAb7F,WACIlB,EAAa,GAAD,mBAAKD,GAAL,CAAgBF,WAcxB,cAAC,IAAD,CAAUb,UAAWA,EAAWM,OAAQS,EAAWoB,cAAc,QAAQC,YAAY,MAAMhB,MAAO,CAAEiB,OAAQ,IAAKC,OAAQ,cCjDtHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.529321b1.chunk.js","sourcesContent":["import format from \"date-fns/format\";\nimport getDay from \"date-fns/getDay\";\nimport parse from \"date-fns/parse\";\nimport startOfWeek from \"date-fns/startOfWeek\";\nimport React, { useState } from \"react\";\nimport { Calendar, dateFnsLocalizer } from \"react-big-calendar\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./App.css\";\nimport { TimePickerComponent } from \"@syncfusion/ej2-react-calendars\";\n\n\nconst locales = {\n    \"en-IN\": require(\"date-fns/locale/en-IN\"),\n};\nconst localizer = dateFnsLocalizer({\n    format,\n    parse,\n    startOfWeek,\n    getDay,\n    locales,\n});\n\nconst events = [\n    {\n        title: \"Team Meeting\",\n        start: new Date(\"10/10/2021 9:00 AM\"),\n        end: new Date(\"10/10/2021 11:00 AM\"),\n    },\n    {\n        title: \"Project Discussion with IT Team\",\n        start: new Date(\"10/10/2021 01:30 PM\"),\n        end: new Date(\"10/10/2021 04:30 PM\"),\n    },\n    {\n        title: \"Meeting with Manager\",\n        start: new Date(\"10/10/2021 05:00 PM\"),\n        end: new Date(\"10/10/2021 07:30 PM\"),\n    },\n];\n\nfunction App() {\n    const [newEvent, setNewEvent] = useState({ title: \"\", start: \"\", end: \"\" });\n    const [allEvents, setAllEvents] = useState(events);\n\n    function handleAddEvent() {\n        setAllEvents([...allEvents, newEvent]);\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>Calendar</h1>\n            <h2>Add New Event</h2>\n            <div className = \"Container\">\n\n                <input type=\"text\" placeholder=\"Add New event\" style={{ width: \"20%\", marginRight: \"10px\", padding: \"5px\" }} value={newEvent.title} onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })} />\n                <DatePicker placeholderText=\"Choose Start Date & Time\" style={{ marginRight: \"10px\" }} showTimeSelect dateFormat='MM/dd/yyyy EE hh:mm a' selected={newEvent.start} onChange={(start) => setNewEvent({ ...newEvent, start })} />\n                <DatePicker placeholderText=\"Choose End Date & Time\" selected={newEvent.end} showTimeSelect dateFormat='MM/dd/yyyy EE hh:mm a' onChange={(end) => setNewEvent({ ...newEvent, end })} />\n                <input type = \"button\" value = \"Add Events\" button style={{ marginTop: \"10px\" }} onClick={handleAddEvent} />\n            </div>\n            <Calendar localizer={localizer} events={allEvents} startAccessor=\"start\" endAccessor=\"end\" style={{ height: 500, margin: \"50px\" }} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}